import Head from "next/head";
import type { ChangeEvent } from "react";
import type { NextPage } from "next";
import { Formik } from "formik";
import { sendMail } from "../store/reducer/mailReducer";
import { useAppDispatch, useAppSelector } from "../store/hook";
import { MailRepositorie } from "../repositories/MailRepositorie";
import { formatPhoneNumber } from "../utils/formatPhoneNumber";
import { contactSchema } from "../yup/contactSchema";
import Input from "../components/Ui/Input";
import Button from "../components/Ui/Button";
import { FaSpinner } from "react-icons/fa";

const Home: NextPage = () => {
  const { error, loading, success } = useAppSelector((state) => state.mail);
  const dispatch = useAppDispatch();

  function onSubmit(data: MailRepositorie) {
    // call the api with data objects for send mail!
    dispatch(sendMail(data));
  }

  function handleFormatPhoneNumber(e: ChangeEvent<HTMLInputElement>) {
    e.target.value = formatPhoneNumber(e.target.value);

    return e;
  }

  return (
    <div>
      <Head>
        <title>Send Mail Solution</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="main">
        <div className="formWrapper">
          <Formik
            initialValues={{} as MailRepositorie}
            onSubmit={async (e: MailRepositorie, { resetForm }) => {
              onSubmit(e);
              resetForm({});
            }}
            validationSchema={contactSchema}
            validateOnChange={false}
          >
            {({ handleSubmit, handleChange, values, errors }) => (
              <form onSubmit={handleSubmit} className="form">
                <div className="inputBlock">
                  <Input
                    type="text"
                    name="name"
                    id="name"
                    required
                    placeholder="Your name"
                    value={values.name}
                    onChange={handleChange}
                  />
                  {errors.name && <span>{errors.name}</span>}
                </div>
                <div className="inputBlock">
                  <Input
                    type="email"
                    name="email"
                    id="email"
                    required
                    placeholder="Your best email"
                    value={values.email}
                    onChange={handleChange}
                  />
                  {errors.email && <span>{errors.email}</span>}
                </div>

                <div className="inputBlock">
                  <Input
                    type="text"
                    name="phone"
                    id="phone"
                    required
                    placeholder="(99) 99999-9999"
                    value={values.phone}
                    onChange={(e) => handleChange(handleFormatPhoneNumber(e))}
                  />
                  {errors.phone && <span>{errors.phone}</span>}
                </div>

                <div className="inputBlock">
                  <Input
                    type="text"
                    name="subject"
                    id="subject"
                    required
                    placeholder="Type your subject"
                    value={values.subject}
                    onChange={handleChange}
                  />
                  {errors.subject && <span>{errors.subject}</span>}
                </div>

                <div className="inputBlock textAreaBlock">
                  <textarea
                    id="message"
                    name="message"
                    value={values.message}
                    onChange={handleChange}
                    cols={30}
                    rows={10}
                    maxLength={120}
                    placeholder="Give me a message"
                  ></textarea>

                  <div className="textareaFooter">
                    <span>{errors.message && errors.message}</span>
                    <strong>max: 300</strong>
                  </div>
                </div>
                <div className="submitWrapper">
                  <Button type="submit" disabled={loading}>
                    ENVIAR
                    {loading && <FaSpinner size={16} />}
                  </Button>
                </div>
                {error && <span>Ocorreu um error...</span>}
                {success && <span>Deu tudo certo...</span>}
              </form>
            )}
          </Formik>
        </div>
      </main>
    </div>
  );
};

export default Home;
